* General settings

** Personal settings
   Name, Email address while creating a document
   #+BEGIN_SRC emacs-lisp
     (setq user-mail-address "adepu.dinesh.a@gmail.com")
     (setq user-full-name "Dinesh A")
   #+END_SRC
   
** Common
   #+BEGIN_SRC emacs-lisp
     (setq make-backup-file nil)
     (setq backup-inhibited t)
     (setq auto-save-default nil)

     (setq scroll-conservatively 100)

     (defalias 'yes-or-no-p 'y-or-n-p)

     (setq ring-bell-function 'ignore)

     (when window-system (global-hl-line-mode t))

     (global-prettify-symbols-mode t)

     ;; Electric auto pair
     (electric-pair-mode t)

     (desktop-save-mode 1)

     ;; Bookmarks file in dropbox.
     (setq bookmark-default-file "~/Dropbox/common/emacs/bookmarks.bmk" bookmark-save-flag 1)

     ;; Copy to clipboard
     (fset 'evil-visual-update-x-selection 'ignore)
     (setq temporary-file-directory "~/.emacs.d/tmp/")

     ;; kill all oher buffers
     (defun nuke-all-buffers ()
       (interactive)
       (mapcar 'kill-buffer (buffer-list))
       (delete-other-windows))

     (global-set-key (kbd "C-x K") 'nuke-all-buffers)

     (defun kill-other-buffers ()
       (interactive)
       (dolist (buffer (buffer-list))
         (unless (or (eql buffer (current-buffer)) )
           (kill-buffer buffer))))
     (global-set-key (kbd "C-x L") 'kill-other-buffers)

     (menu-bar-mode -1)
     (tool-bar-mode -1)
     (setq inhibit-startup-message t)

     (use-package which-key
       :ensure t
       :init
       (which-key-mode))

     (use-package beacon
       :ensure t
       :init
       (beacon-mode 1))

     (use-package restart-emacs
       :ensure t
       :bind (("C-x M-c" . restart-emacs)))

     (use-package rainbow-delimiters
       :ensure t
       :init
       (progn
         (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
         (add-hook 'clojure-mode-hook 'rainbow-delimiters-mode)))

     (use-package aggressive-indent
       :ensure t
       :init (global-aggressive-indent-mode))

     (use-package golden-ratio                 ; Auto resize windows
       :ensure t
       :diminish golden-ratio-mode
       :config
       (golden-ratio-mode 1)
       (setq golden-ratio-auto-scale t)
       (setq golden-ratio-extra-commands
             (append golden-ratio-extra-commands
                     '(evil-window-left
                       evil-window-right
                       evil-window-up
                       evil-window-down))))
   #+END_SRC

   
** clock
   #+BEGIN_SRC emacs-lisp
     (setq display-time-24hr-format t) 
     (display-time-mode 1) 
   #+END_SRC

* Keyboard settings
** Hash key problem Mac os 
   If Mac is using British type keyboard, typing Shift-3 will be £ instead of #.
   #+BEGIN_SRC emacs-lisp
     ;; Allow hash to be entered  
     (global-set-key (kbd "M-3") '(lambda () (interactive) (insert "#")))
   #+END_SRC
   
* Org mode
** Basic config
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-structure-template-alist
                  '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
   #+END_SRC

** Org bullets
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :ensure t
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
   #+END_SRC
   
* IDO mode
  
** Enable Ido mode
   #+BEGIN_SRC emacs-lisp
     (use-package ido
       :ensure t
       :config(progn
                (setq ido-enable-flex-matching t)
                (setq ido-everywhere t)
                (ido-mode 1)))


     (use-package flx-ido
       :ensure t
       :init
       (progn
         (setq gc-cons-threshold (* 20 (expt 2 20)) ; megabytes
               ido-use-faces nil))
       :config
       (flx-ido-mode 1))
     (setq ido-enable-flex-matching nil)
     (setq ido-create-new-buffer 'always)
     (setq ido-everywhere t)
     (ido-mode 1)
   #+END_SRC

   #+RESULTS:

   
** smex
   #+BEGIN_SRC emacs-lisp
     (use-package smex
       :ensure t
       :init (smex-initialize)
       :bind
       ("M-x" . smex)) 
   #+END_SRC

   
* Vim emulator
  Vim bindings for faster navigation
#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :diminish evil
  :init (evil-mode 1)
  (setq evil-insert-state-cursor '((bar . 1) "white")
        evil-visual-state-cursor '(box "dark orange")
        evil-normal-state-cursor '(box "white"))
  :bind (:map
         evil-insert-state-map
         ([S-left]     . windmove-left)
         ([S-right]    . windmove-right)
         ([S-up]     . windmove-up)
         ([S-down]    . windmove-down)
         ("SPC" . nil)
         :map
         evil-normal-state-map
         (";" . evil-ex)
         (":"   .       evil-repeat-find-char)
         :map    evil-motion-state-map
         ([S-left]     . windmove-left)
         ([S-right]    . windmove-right)
         ([S-up]     . windmove-up)
         ([S-down]    . windmove-down)
         ))


(use-package evil-leader
  :ensure t
  :diminish evil-leader
  :init (global-evil-leader-mode)
  :config (progn
            (evil-leader/set-leader ",")
            (evil-leader/set-key "b" 'switch-to-buffer)
            (evil-leader/set-key "s" 'save-buffer)
            (evil-leader/set-key "e" 'find-file)
            (evil-leader/set-key "1" 'delete-other-windows)
            (evil-leader/set-key "x" 'bookmark-jump)
            (evil-leader/set-key "0" 'delete-window)
            (evil-leader/set-key "3" 'split-window-right)
            (evil-leader/set-key "2" 'split-window-below)
            (evil-leader/set-key "." 'elpy-goto-definition-other-window)
            (evil-leader/set-key "," 'elpy-goto-definition)
            (evil-leader/set-key "f" 'ff-find-other-file)
            (evil-leader/set-key "c" 'recentf-open-files)
            (evil-leader/set-key "r" 'org-ref-helm-insert-ref-link)
            (evil-leader/set-key "l" 'org-ref-helm-insert-label-link)
            (evil-leader/set-key "w" 'ispell-word)
            (evil-leader/set-key "g" 'magit-status)
            (evil-leader/set-key "z" 'fzf)
            (evil-leader/set-key "n" 'windmove-left)
            (evil-leader/set-key "m" 'windmove-right)
            (evil-leader/set-key "<SPC>" 'windmove-down)
            (evil-leader/set-key "p" 'windmove-up)
            (evil-leader/set-key "o" 'org-ref-open-bibtex-notes)
            (evil-leader/set-key "`" 'org-edit-src-exit)
            (evil-leader/set-key "u" 'org-ref-open-pdf-at-point)
            (evil-leader/set-key "k" 'kill-this-buffer)))

(use-package key-chord
  :ensure t)
(require 'key-chord)
(key-chord-mode 1)
(key-chord-define evil-insert-state-map  "jk" 'evil-normal-state)

;; evil cursor terminal
(use-package evil-terminal-cursor-changer
  :ensure t)
(unless (display-graphic-p)
  (require 'evil-terminal-cursor-changer)
  (evil-terminal-cursor-changer-activate) ; or (etcc-on)
  )


(setq evil-motion-state-cursor 'box)  ; █
(setq evil-visual-state-cursor 'box)  ; █
(setq evil-normal-state-cursor 'box)  ; █
(setq evil-insert-state-cursor 'bar)  ; ⎸
(setq evil-emacs-state-cursor  'hbar) ; _

;;; esc quits
(defun minibuffer-keyboard-quit ()
  "Abort recursive edit.
  In Delete Selection mode, if the mark is active, just deactivate it;
  then it takes a second \\[keyboard-quit] to abort the minibuffer."
  (interactive)
  (if (and delete-selection-mode transient-mark-mode mark-active)
      (setq deactivate-mark  t)
    (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
    (abort-recursive-edit)))
(define-key evil-normal-state-map [escape] 'keyboard-quit)
(define-key evil-visual-state-map [escape] 'keyboard-quit)
(define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
#+END_SRC



  
* Git for version control

  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :ensure t)
    (global-auto-revert-mode t)
    (use-package git-gutter
      :ensure t
      :init
      )
    (global-git-gutter-mode 0)
    ;; disable evil in timemachine
    ;; @see https://bitbucket.org/lyro/evil/issue/511/let-certain-minor-modes-key-bindings
    (eval-after-load 'git-timemachine
      '(progn
         (evil-make-overriding-map git-timemachine-mode-map 'normal)
         ;; force update evil keymaps after git-timemachine-mode loaded
         (add-hook 'git-timemachine-mode-hook #'evil-normalize-keymaps)))

    (use-package git-timemachine
      :ensure t
      )

    (use-package evil-magit
      :ensure t)
  #+END_SRC
  
* Dashboard
  #+BEGIN_SRC emacs-lisp
    (use-package dashboard
      :ensure t
      :config
      (dashboard-setup-startup-hook)
      (setq dashboard-items '((recents . 10)))
      (setq dashboard-banner-logo-title "Hello Dinesh!, Have a good day")
      )
  #+END_SRC
  
  
* mode-line
  
** Spaceline
#+BEGIN_SRC emacs-lisp
  (use-package spaceline :ensure t
    :config
    (setq-default mode-line-format '("%e" (:eval (spaceline-ml-main)))))

  (use-package spaceline-config :ensure spaceline
    :config
    (spaceline-helm-mode 1)
    (spaceline-emacs-theme))
#+END_SRC
   
   
** diminish
   #+BEGIN_SRC emacs-lisp
     (use-package diminish
       :ensure t
       :init
       (diminish 'hungru-delete-mode)
       (diminish 'beacon-mode)
       (diminish 'rainbow-mode)
       (diminish 'flycheck-mode)
       (diminish 'yas-mode)
       (diminish 'auto-revert-mode)
       (diminish 'undo-tree-mode)
       (diminish 'company-mode)
       (diminish 'which-key-mode))
   #+END_SRC

   #+RESULTS:

* auto-completion
  
** company setup with c++
  #+BEGIN_SRC emacs-lisp
    (use-package company
      :ensure t
      :init
      (add-hook 'after-init-hook 'global-company-mode)
      :config
      (setq company-minimum-prefix-length 1)
      (setq company-idle-delay 0)
      ) 
    (with-eval-after-load 'company
      (define-key company-active-map (kbd "C-n") #'company-select-next)
      (define-key company-active-map (kbd "C-p") #'company-select-previous)
      )

    (use-package company-irony
      :ensure t
      :config
      (require 'company)
      (add-to-list 'company-backends 'company-irony))

    (use-package irony
      :ensure t
      :config
      (add-hook 'c++-mode-hook 'irony-mode)
      (add-hook 'c-mode-hook 'irony-mode)
      (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

    (with-eval-after-load 'company
      (add-hook 'c++-mode-hook 'company-mode)
      (add-hook 'c-mode-hook 'company-mode))
  #+END_SRC
   
** company statistics
   #+BEGIN_SRC emacs-lisp
     (use-package company-statistics
       :ensure t
       :config
       (company-statistics-mode))
   #+END_SRC
  
   
* rust language
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :ensure t
    :diminish t)

  (use-package racer
    :ensure t
    :diminish t
    :bind
    (:map evil-normal-state-map
          ("M-." .  racer-find-definition)
          )
    :config
    (add-hook 'rust-mode-hook #'racer-mode)
    (add-hook 'racer-mode-hook #'eldoc-mode))

  (setq racer-cmd "~/.cargo/bin/racer")
  (setq racer-rust-src-path "~/.multirust/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/src")

  (add-hook 'rust-mode-hook #'racer-mode)
  (add-hook 'racer-mode-hook #'eldoc-mode)
  (add-hook 'racer-mode-hook #'company-mode)

  (require 'rust-mode)
  (define-key rust-mode-map (kbd "TAB")  #'company-indent-or-complete-common)
  (setq company-tooltip-align-annotations t)



  (use-package flycheck-rust
    :ensure t
    :defer t
    :init (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))

  (use-package flycheck-package
    :ensure t
    :init (with-eval-after-load 'flycheck (flycheck-package-setup)))

  (use-package toml-mode
    :ensure t)

  (use-package clang-format
    :ensure t)

  (use-package cargo
    :ensure t
    :diminish t)
  (add-hook 'rust-mode-hook 'cargo-minor-mode)

  (use-package rg
    :ensure t
    :diminish t)

  ;; snippets
  ;; (add-to-list 'load-path "/home/dinesh/.emacs.d/elpa/rust-snippets/")
  ;; (autoload 'rust-snippets/initialize "rust-snippets")
  ;; (eval-after-load 'yasnippet
  ;;   '(rust-snippets/initialize))
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Rust ends
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+END_SRC

  
* Yasnippet
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure t
      :init
      (yas-global-mode 1)
      :config
      (use-package yasnippet-snippets
        :ensure t)
      (yas-reload-all))

    ;; Add yasnippet support for all company backends
    ;; https://github.com/syl20bnr/spacemacs/pull/179
    (defvar company-mode/enable-yas t
      "Enable yasnippet for all backends.")

    (defun company-mode/backend-with-yas (backend)
      (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
          backend
        (append (if (consp backend) backend (list backend))
                '(:with company-yasnippet))))

    (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))
  #+END_SRC


  
* flycheck
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :init
      (global-flycheck-mode t))
  #+END_SRC
  

* path from shell
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    ;; :load-path "~/.emacs.d/elisp/exec-path-from-shell/"
    :config
    (push "HISTFILE" exec-path-from-shell-variables)
    (setq exec-path-from-shell-check-startup-files nil)
    (exec-path-from-shell-initialize))
#+END_SRC
